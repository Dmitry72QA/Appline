package ru.appline;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import ru.appline.logic.Model;
import ru.appline.logic.User;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Map;

@WebServlet(urlPatterns = "/get")
public class ServletList extends HttpServlet {
   private static final long serialVersionUID = 1L;

   Model model = Model.getInstance();
   Gson gson = new GsonBuilder().setPrettyPrinting().create();

   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {


/*        response.setContentType("text/html;charset=utf-8");
       PrintWriter pw = response.getWriter();

       int id = Integer.parseInt(request.getParameter("id"));

       if (id == 0) {
           pw.print("<html" +
                   "<h3>Доступные пользователи</h3><br/>" +
                   "ID пользователя " +
                   "<ul>");

           for (Map.Entry<Integer, User> entry : model.getFromList().entrySet()) {
               pw.print("<li>" + entry.getKey() + "</li>" +
                       "<ul>" +
                       "<li>Имя: " + entry.getValue().getName() + "</li>" +
                       "<li>Фамилия: " + entry.getValue().getSurname() + "</li>" +
                       "<li>Зарплата: " + entry.getValue().getSalary() + "</li>" +
                       "</ul>");

           }
           pw.print("</ul>" +
                   "<a href=\"index.jsp\">Домой</a>" +
                   "</html>");

       } else if (id > 0) {
           if (id > model.getFromList().size()) {
               pw.print("<html" +
                       "<h3>Такого пользователя нет :(</h3>" +
                       "<a href=\"index.jsp\">Домой</a>" +
                       "</html>");
           } else {
               pw.print("<html" +
                       "<h3>Запрошенный пользователь</h3>" +
                       "<br/>" +
                       "Имя: " + model.getFromList().get(id).getName() + "<br/>" +
                       "Фамилия: " + model.getFromList().get(id).getSurname() + "<br/>" +
                       "Зарплата: " + model.getFromList().get(id).getSalary() + "<br/>" +
                       "<a href=\"index.jsp\">Домой</a>" +
                       "</html>");
           }
       } else {
           pw.print("<html" +
                   "<h3>ID должен быть больше нуля!</h3>" +
                   "<a href=\"index.jsp\">Домой</a>" +
                   "</html>");*/

       request.setCharacterEncoding("UTF-8");

       StringBuffer stringBuffer = new StringBuffer();
       String line;

       // считываем данные из потока ввода запроса к нашему сервлету
       try {
           // создаем переменную типа буфферизированного потока для чтения и присваиваем ему поток ввода запроса нашего сервлета
           BufferedReader reader = request.getReader();
           // в цикле считываем данные построчно
           // условие: читать пока считанная строка не равна null
           while ((line = reader.readLine()) != null) {
               // сохраняем считанные строки в StringBuffer
               stringBuffer.append(line);
           }
       } catch (IOException e) {
           System.out.println("Error");
       }

       // преобразуем строку в формате json к объекту
       JsonObject jobi = gson.fromJson(String.valueOf(stringBuffer), JsonObject.class);
       int id = jobi.get("id").getAsInt();

       response.setContentType("application/json;charset=utf-8");
       PrintWriter printWriter = response.getWriter();

       if (id == 0) {
           printWriter.print(gson.toJson(model.getFromList()));
       } else if (model.containsUser(id)) {
           printWriter.print(gson.toJson(model.getUser(id)));
       } else {
           printWriter.print(gson.toJson(gson.fromJson("{\"Message\":\"Пользователь с id " + id + " не найден.\"}", JsonObject.class)));
       }

   }
}

